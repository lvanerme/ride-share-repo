{"remainingRequest":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/babel-loader/lib/index.js!/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/vuetify/lib/components/VTreeview/VTreeview.js","dependencies":[{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/vuetify/lib/components/VTreeview/VTreeview.js","mtime":1652222692000},{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/babel.config.js","mtime":1651672550000},{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/cache-loader/dist/cjs.js","mtime":1651672807000},{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/babel-loader/lib/index.js","mtime":1652222692000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["VTreeviewNode","VTreeviewNodeProps","Themeable","provide","RegistrableProvide","arrayDiff","deepEqual","getObjectValueByPath","mixins","consoleWarn","filterTreeItems","filterTreeItem","extend","name","treeview","props","active","type","Array","default","dense","Boolean","disabled","filter","Function","hoverable","items","multipleActive","open","openAll","returnObject","search","String","value","data","level","activeCache","Set","nodes","openCache","selectedCache","computed","excludedItems","excluded","i","length","itemKey","itemText","itemChildren","watch","handler","oldKeys","Object","keys","map","k","item","newKeys","getKeys","diff","forEach","oldSelectedCache","buildTree","emitSelected","deep","handleNodeCacheWatcher","updateActive","emitActive","updateSelected","updateOpen","emitOpen","created","getValue","key","mounted","$slots","prepend","append","updateAll","methods","push","children","parent","oldNode","hasOwnProperty","isSelected","isIndeterminate","isActive","isOpen","vnode","node","c","selectionType","calculateState","add","updateVnodeState","state","counts","reduce","child","emitNodeCache","event","cache","$emit","updateFn","emitFn","v","old","getDescendants","descendants","getParents","parents","register","unregister","isParent","delete","isForced","changed","Map","descendant","itemDisabled","set","calculated","entries","hasLoaded","checkChildren","then","isExcluded","has","render","h","genChild","options","bind","staticClass","class","themeClasses"],"sourceRoot":"","sources":["../../../src/components/VTreeview/VTreeview.ts"],"sourcesContent":["// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    dense: Boolean,\n    disabled: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren) ?? []\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (\n          this.selectionType !== 'independent' &&\n          parent !== null &&\n          !this.nodes.hasOwnProperty(key) &&\n          this.nodes.hasOwnProperty(parent)\n        ) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length && this.selectionType !== 'independent') {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.filter(item => {\n        return !this.isExcluded(getObjectValueByPath(item, this.itemKey))\n      }).map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, this.disabled || getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"]}]}