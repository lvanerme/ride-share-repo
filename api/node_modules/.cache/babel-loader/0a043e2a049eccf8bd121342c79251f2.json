{"remainingRequest":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/babel-loader/lib/index.js!/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/vuetify/lib/components/VCalendar/modes/stack.js","dependencies":[{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/vuetify/lib/components/VCalendar/modes/stack.js","mtime":1652222692000},{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/babel.config.js","mtime":1651672550000},{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/cache-loader/dist/cjs.js","mtime":1651672807000},{"path":"/home/CS/users/lvanerme/.linux/cos243/ride-share-repo/api/node_modules/babel-loader/lib/index.js","mtime":1652222692000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9ob21lL0NTL3VzZXJzL2x2YW5lcm1lLy5saW51eC9jb3MyNDMvcmlkZS1zaGFyZS1yZXBvL2FwaS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyI7CmltcG9ydCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciBmcm9tICIvaG9tZS9DUy91c2Vycy9sdmFuZXJtZS8ubGludXgvY29zMjQzL3JpZGUtc2hhcmUtcmVwby9hcGkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCB7IGdldE92ZXJsYXBHcm91cEhhbmRsZXIsIGdldFZpc3VhbHMsIGhhc092ZXJsYXAsIGdldE5vcm1hbGl6ZWRSYW5nZSB9IGZyb20gJy4vY29tbW9uJzsKaW1wb3J0IHsgZ2V0VGltZXN0YW1wSWRlbnRpZmllciB9IGZyb20gJy4uL3V0aWwvdGltZXN0YW1wJzsKdmFyIEZVTExfV0lEVEggPSAxMDA7CnZhciBERUZBVUxUX09GRlNFVCA9IDU7CnZhciBXSURUSF9NVUxUSVBMSUVSID0gMS43OwovKioKICogVmFyaWF0aW9uIG9mIGNvbHVtbiBtb2RlIHdoZXJlIGV2ZW50cyBjYW4gYmUgc3RhY2tlZC4gVGhlIHByaW9yaXR5IG9mIHRoaXMKICogbW9kZSBpcyB0byBzdGFjayBldmVudHMgdG9nZXRoZXIgdGFraW5nIHVwIHRoZSBsZWFzdCBhbW91bnQgb2Ygc3BhY2Ugd2hpbGUKICogdHJ5aW5nIHRvIGVuc3VyZSB0aGUgY29udGVudCBvZiB0aGUgZXZlbnQgaXMgYWx3YXlzIHZpc2libGUgYXMgd2VsbCBhcyBpdHMKICogc3RhcnQgYW5kIGVuZC4gQSBzaWJsaW5nIGNvbHVtbiBoYXMgaW50ZXJzZWN0aW5nIGV2ZW50IGNvbnRlbnQgYW5kIG11c3QgYmUKICogcGxhY2VkIGJlc2lkZSBlYWNoIG90aGVyLiBOb24tc2libGluZyBjb2x1bW5zIGFyZSBvZmZzZXQgYnkgNSUgZnJvbSB0aGUKICogcHJldmlvdXMgY29sdW1uLiBUaGUgd2lkdGggaXMgc2NhbGVkIGJ5IDEuNyBzbyB0aGUgZXZlbnRzIG92ZXJsYXAgYW5kCiAqIHdoaXRlc3BhY2UgaXMgcmVkdWNlZC4gSWYgdGhlcmUgaXMgYSBob2xlIGluIGNvbHVtbnMgdGhlIGV2ZW50IHdpZHRoIGlzCiAqIHNjYWxlZCB1cCBzbyBpdCBpbnRlcnNlY3RzIHdpdGggdGhlIG5leHQgY29sdW1uLiBUaGUgY29sdW1ucyBoYXZlIGVxdWFsCiAqIHdpZHRoIGluIHRoZSBzcGFjZSB0aGV5IGFyZSBnaXZlbi4gSWYgdGhlIGV2ZW50IGRvZXNuJ3QgaGF2ZSBhbnkgdG8gdGhlCiAqIHJpZ2h0IG9mIGl0IHRoYXQgaW50ZXJzZWN0IHdpdGggaXQncyBjb250ZW50IGl0J3MgcmlnaHQgc2lkZSBpcyBleHRlbmRlZAogKiB0byB0aGUgcmlnaHQgc2lkZS4KICovCgpleHBvcnQgdmFyIHN0YWNrID0gZnVuY3Rpb24gc3RhY2soZXZlbnRzLCBmaXJzdFdlZWtkYXksIG92ZXJsYXBUaHJlc2hvbGQpIHsKICB2YXIgaGFuZGxlciA9IGdldE92ZXJsYXBHcm91cEhhbmRsZXIoZmlyc3RXZWVrZGF5KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzCgogIHJldHVybiBmdW5jdGlvbiAoZGF5LCBkYXlFdmVudHMsIHRpbWVkLCByZXNldCkgewogICAgaWYgKCF0aW1lZCkgewogICAgICByZXR1cm4gaGFuZGxlci5nZXRWaXN1YWxzKGRheSwgZGF5RXZlbnRzLCB0aW1lZCwgcmVzZXQpOwogICAgfQoKICAgIHZhciBkYXlTdGFydCA9IGdldFRpbWVzdGFtcElkZW50aWZpZXIoZGF5KTsKICAgIHZhciB2aXN1YWxzID0gZ2V0VmlzdWFscyhkYXlFdmVudHMsIGRheVN0YXJ0KTsKICAgIHZhciBncm91cHMgPSBnZXRHcm91cHModmlzdWFscywgZGF5U3RhcnQpOwoKICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cHMpLAogICAgICAgIF9zdGVwOwoKICAgIHRyeSB7CiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgdmFyIGdyb3VwID0gX3N0ZXAudmFsdWU7CiAgICAgICAgdmFyIG5vZGVzID0gW107CgogICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZ3JvdXAudmlzdWFscyksCiAgICAgICAgICAgIF9zdGVwMjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciB2aXN1YWwgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICAgIHZhciBjaGlsZCA9IGdldE5vZGUodmlzdWFsLCBkYXlTdGFydCk7CiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldE5leHRJbmRleChjaGlsZCwgbm9kZXMpOwoKICAgICAgICAgICAgaWYgKGluZGV4ID09PSBmYWxzZSkgewogICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoY2hpbGQsIG5vZGVzKTsKCiAgICAgICAgICAgICAgaWYgKHBhcmVudCkgewogICAgICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gcGFyZW50OwogICAgICAgICAgICAgICAgY2hpbGQuc2libGluZyA9IGhhc092ZXJsYXAoY2hpbGQuc3RhcnQsIGNoaWxkLmVuZCwgcGFyZW50LnN0YXJ0LCBhZGRUaW1lKHBhcmVudC5zdGFydCwgb3ZlcmxhcFRocmVzaG9sZCkpOwogICAgICAgICAgICAgICAgY2hpbGQuaW5kZXggPSBwYXJlbnQuaW5kZXggKyAxOwogICAgICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgX2dldE92ZXJsYXBwaW5nUmFuZ2UgPSBnZXRPdmVybGFwcGluZ1JhbmdlKGNoaWxkLCBub2RlcywgaW5kZXggLSAxLCBpbmRleCAtIDEpLAogICAgICAgICAgICAgICAgICBfZ2V0T3ZlcmxhcHBpbmdSYW5nZTIgPSBfc2xpY2VkVG9BcnJheShfZ2V0T3ZlcmxhcHBpbmdSYW5nZSwgMSksCiAgICAgICAgICAgICAgICAgIF9wYXJlbnQgPSBfZ2V0T3ZlcmxhcHBpbmdSYW5nZTJbMF07CgogICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGdldE92ZXJsYXBwaW5nUmFuZ2UoY2hpbGQsIG5vZGVzLCBpbmRleCArIDEsIGluZGV4ICsgbm9kZXMubGVuZ3RoLCB0cnVlKTsKICAgICAgICAgICAgICBjaGlsZC5jaGlsZHJlbiA9IGNoaWxkcmVuOwogICAgICAgICAgICAgIGNoaWxkLmluZGV4ID0gaW5kZXg7CgogICAgICAgICAgICAgIGlmIChfcGFyZW50KSB7CiAgICAgICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBfcGFyZW50OwogICAgICAgICAgICAgICAgY2hpbGQuc2libGluZyA9IGhhc092ZXJsYXAoY2hpbGQuc3RhcnQsIGNoaWxkLmVuZCwgX3BhcmVudC5zdGFydCwgYWRkVGltZShfcGFyZW50LnN0YXJ0LCBvdmVybGFwVGhyZXNob2xkKSk7CgogICAgICAgICAgICAgICAgX3BhcmVudC5jaGlsZHJlbi5wdXNoKGNoaWxkKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2hpbGRyZW4pLAogICAgICAgICAgICAgICAgICBfc3RlcDM7CgogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICB2YXIgZ3JhbmQgPSBfc3RlcDMudmFsdWU7CgogICAgICAgICAgICAgICAgICBpZiAoZ3JhbmQucGFyZW50ID09PSBfcGFyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZ3JhbmQucGFyZW50ID0gY2hpbGQ7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHZhciBncmFuZE5leHQgPSBncmFuZC5pbmRleCAtIGNoaWxkLmluZGV4IDw9IDE7CgogICAgICAgICAgICAgICAgICBpZiAoZ3JhbmROZXh0ICYmIGNoaWxkLnNpYmxpbmcgJiYgaGFzT3ZlcmxhcChjaGlsZC5zdGFydCwgYWRkVGltZShjaGlsZC5zdGFydCwgb3ZlcmxhcFRocmVzaG9sZCksIGdyYW5kLnN0YXJ0LCBncmFuZC5lbmQpKSB7CiAgICAgICAgICAgICAgICAgICAgZ3JhbmQuc2libGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vZGVzLnB1c2goY2hpbGQpOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICAgIH0KCiAgICAgICAgY2FsY3VsYXRlQm91bmRzKG5vZGVzLCBvdmVybGFwVGhyZXNob2xkKTsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICB9IGZpbmFsbHkgewogICAgICBfaXRlcmF0b3IuZigpOwogICAgfQoKICAgIHZpc3VhbHMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYS5sZWZ0IC0gYi5sZWZ0IHx8IGEuZXZlbnQuc3RhcnRUaW1lc3RhbXBJZGVudGlmaWVyIC0gYi5ldmVudC5zdGFydFRpbWVzdGFtcElkZW50aWZpZXI7CiAgICB9KTsKICAgIHJldHVybiB2aXN1YWxzOwogIH07Cn07CgpmdW5jdGlvbiBjYWxjdWxhdGVCb3VuZHMobm9kZXMsIG92ZXJsYXBUaHJlc2hvbGQpIHsKICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5vZGVzKSwKICAgICAgX3N0ZXA0OwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgdmFyIG5vZGUgPSBfc3RlcDQudmFsdWU7CiAgICAgIHZhciB2aXN1YWwgPSBub2RlLnZpc3VhbCwKICAgICAgICAgIHBhcmVudCA9IG5vZGUucGFyZW50OwogICAgICB2YXIgY29sdW1ucyA9IGdldE1heENoaWxkSW5kZXgobm9kZSkgKyAxOwogICAgICB2YXIgc3BhY2VMZWZ0ID0gcGFyZW50ID8gcGFyZW50LnZpc3VhbC5sZWZ0IDogMDsKICAgICAgdmFyIHNwYWNlV2lkdGggPSBGVUxMX1dJRFRIIC0gc3BhY2VMZWZ0OwogICAgICB2YXIgb2Zmc2V0ID0gTWF0aC5taW4oREVGQVVMVF9PRkZTRVQsIEZVTExfV0lEVEggLyBjb2x1bW5zKTsKICAgICAgdmFyIGNvbHVtbldpZHRoTXVsdGlwbGllciA9IGdldENvbHVtbldpZHRoTXVsdGlwbGllcihub2RlLCBub2Rlcyk7CiAgICAgIHZhciBjb2x1bW5PZmZzZXQgPSBzcGFjZVdpZHRoIC8gKGNvbHVtbnMgLSBub2RlLmluZGV4ICsgMSk7CiAgICAgIHZhciBjb2x1bW5XaWR0aCA9IHNwYWNlV2lkdGggLyAoY29sdW1ucyAtIG5vZGUuaW5kZXggKyAobm9kZS5zaWJsaW5nID8gMSA6IDApKSAqIGNvbHVtbldpZHRoTXVsdGlwbGllcjsKCiAgICAgIGlmIChwYXJlbnQpIHsKICAgICAgICB2aXN1YWwubGVmdCA9IG5vZGUuc2libGluZyA/IHNwYWNlTGVmdCArIGNvbHVtbk9mZnNldCA6IHNwYWNlTGVmdCArIG9mZnNldDsKICAgICAgfQoKICAgICAgdmlzdWFsLndpZHRoID0gaGFzRnVsbFdpZHRoKG5vZGUsIG5vZGVzLCBvdmVybGFwVGhyZXNob2xkKSA/IEZVTExfV0lEVEggLSB2aXN1YWwubGVmdCA6IE1hdGgubWluKEZVTExfV0lEVEggLSB2aXN1YWwubGVmdCwgY29sdW1uV2lkdGggKiBXSURUSF9NVUxUSVBMSUVSKTsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjQuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3I0LmYoKTsKICB9Cn0KCmZ1bmN0aW9uIGdldENvbHVtbldpZHRoTXVsdGlwbGllcihub2RlLCBub2RlcykgewogIGlmICghbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHsKICAgIHJldHVybiAxOwogIH0KCiAgdmFyIG1heENvbHVtbiA9IG5vZGUuaW5kZXggKyBub2Rlcy5sZW5ndGg7CiAgdmFyIG1pbkNvbHVtbiA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uIChtaW4sIGMpIHsKICAgIHJldHVybiBNYXRoLm1pbihtaW4sIGMuaW5kZXgpOwogIH0sIG1heENvbHVtbik7CiAgcmV0dXJuIG1pbkNvbHVtbiAtIG5vZGUuaW5kZXg7Cn0KCmZ1bmN0aW9uIGdldE92ZXJsYXBwaW5nSW5kaWNlcyhub2RlLCBub2RlcykgewogIHZhciBpbmRpY2VzID0gW107CgogIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm9kZXMpLAogICAgICBfc3RlcDU7CgogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjUucygpOyAhKF9zdGVwNSA9IF9pdGVyYXRvcjUubigpKS5kb25lOykgewogICAgICB2YXIgb3RoZXIgPSBfc3RlcDUudmFsdWU7CgogICAgICBpZiAoaGFzT3ZlcmxhcChub2RlLnN0YXJ0LCBub2RlLmVuZCwgb3RoZXIuc3RhcnQsIG90aGVyLmVuZCkpIHsKICAgICAgICBpbmRpY2VzLnB1c2gob3RoZXIuaW5kZXgpOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfaXRlcmF0b3I1LmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yNS5mKCk7CiAgfQoKICByZXR1cm4gaW5kaWNlczsKfQoKZnVuY3Rpb24gZ2V0TmV4dEluZGV4KG5vZGUsIG5vZGVzKSB7CiAgdmFyIGluZGljZXMgPSBnZXRPdmVybGFwcGluZ0luZGljZXMobm9kZSwgbm9kZXMpOwogIGluZGljZXMuc29ydCgpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpKyspIHsKICAgIGlmIChpIDwgaW5kaWNlc1tpXSkgewogICAgICByZXR1cm4gaTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZ2V0T3ZlcmxhcHBpbmdSYW5nZShub2RlLCBub2RlcywgaW5kZXhNaW4sIGluZGV4TWF4KSB7CiAgdmFyIHJldHVybkZpcnN0Q29sdW1uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTsKICB2YXIgb3ZlcmxhcHBpbmcgPSBbXTsKCiAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihub2RlcyksCiAgICAgIF9zdGVwNjsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yNi5zKCk7ICEoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBvdGhlciA9IF9zdGVwNi52YWx1ZTsKCiAgICAgIGlmIChvdGhlci5pbmRleCA+PSBpbmRleE1pbiAmJiBvdGhlci5pbmRleCA8PSBpbmRleE1heCAmJiBoYXNPdmVybGFwKG5vZGUuc3RhcnQsIG5vZGUuZW5kLCBvdGhlci5zdGFydCwgb3RoZXIuZW5kKSkgewogICAgICAgIG92ZXJsYXBwaW5nLnB1c2gob3RoZXIpOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfaXRlcmF0b3I2LmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yNi5mKCk7CiAgfQoKICBpZiAocmV0dXJuRmlyc3RDb2x1bW4gJiYgb3ZlcmxhcHBpbmcubGVuZ3RoID4gMCkgewogICAgdmFyIGZpcnN0ID0gb3ZlcmxhcHBpbmcucmVkdWNlKGZ1bmN0aW9uIChtaW4sIG4pIHsKICAgICAgcmV0dXJuIE1hdGgubWluKG1pbiwgbi5pbmRleCk7CiAgICB9LCBvdmVybGFwcGluZ1swXS5pbmRleCk7CiAgICByZXR1cm4gb3ZlcmxhcHBpbmcuZmlsdGVyKGZ1bmN0aW9uIChuKSB7CiAgICAgIHJldHVybiBuLmluZGV4ID09PSBmaXJzdDsKICAgIH0pOwogIH0KCiAgcmV0dXJuIG92ZXJsYXBwaW5nOwp9CgpmdW5jdGlvbiBnZXRQYXJlbnQobm9kZSwgbm9kZXMpIHsKICB2YXIgcGFyZW50ID0gbnVsbDsKCiAgdmFyIF9pdGVyYXRvcjcgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihub2RlcyksCiAgICAgIF9zdGVwNzsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBvdGhlciA9IF9zdGVwNy52YWx1ZTsKCiAgICAgIGlmIChoYXNPdmVybGFwKG5vZGUuc3RhcnQsIG5vZGUuZW5kLCBvdGhlci5zdGFydCwgb3RoZXIuZW5kKSAmJiAocGFyZW50ID09PSBudWxsIHx8IG90aGVyLmluZGV4ID4gcGFyZW50LmluZGV4KSkgewogICAgICAgIHBhcmVudCA9IG90aGVyOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfaXRlcmF0b3I3LmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yNy5mKCk7CiAgfQoKICByZXR1cm4gcGFyZW50Owp9CgpmdW5jdGlvbiBoYXNGdWxsV2lkdGgobm9kZSwgbm9kZXMsIG92ZXJsYXBUaHJlc2hvbGQpIHsKICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG5vZGVzKSwKICAgICAgX3N0ZXA4OwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3I4LnMoKTsgIShfc3RlcDggPSBfaXRlcmF0b3I4Lm4oKSkuZG9uZTspIHsKICAgICAgdmFyIG90aGVyID0gX3N0ZXA4LnZhbHVlOwoKICAgICAgaWYgKG90aGVyICE9PSBub2RlICYmIG90aGVyLmluZGV4ID4gbm9kZS5pbmRleCAmJiBoYXNPdmVybGFwKG5vZGUuc3RhcnQsIGFkZFRpbWUobm9kZS5zdGFydCwgb3ZlcmxhcFRocmVzaG9sZCksIG90aGVyLnN0YXJ0LCBvdGhlci5lbmQpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfaXRlcmF0b3I4LmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yOC5mKCk7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gZ2V0R3JvdXBzKHZpc3VhbHMsIGRheVN0YXJ0KSB7CiAgdmFyIGdyb3VwcyA9IFtdOwoKICB2YXIgX2l0ZXJhdG9yOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHZpc3VhbHMpLAogICAgICBfc3RlcDk7CgogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjkucygpOyAhKF9zdGVwOSA9IF9pdGVyYXRvcjkubigpKS5kb25lOykgewogICAgICB2YXIgdmlzdWFsID0gX3N0ZXA5LnZhbHVlOwoKICAgICAgdmFyIF9nZXROb3JtYWxpemVkUmFuZ2UgPSBnZXROb3JtYWxpemVkUmFuZ2UodmlzdWFsLmV2ZW50LCBkYXlTdGFydCksCiAgICAgICAgICBfZ2V0Tm9ybWFsaXplZFJhbmdlMiA9IF9zbGljZWRUb0FycmF5KF9nZXROb3JtYWxpemVkUmFuZ2UsIDIpLAogICAgICAgICAgc3RhcnQgPSBfZ2V0Tm9ybWFsaXplZFJhbmdlMlswXSwKICAgICAgICAgIGVuZCA9IF9nZXROb3JtYWxpemVkUmFuZ2UyWzFdOwoKICAgICAgdmFyIGFkZGVkID0gZmFsc2U7CgogICAgICB2YXIgX2l0ZXJhdG9yMTAgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cHMpLAogICAgICAgICAgX3N0ZXAxMDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IxMC5zKCk7ICEoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBncm91cCA9IF9zdGVwMTAudmFsdWU7CgogICAgICAgICAgaWYgKGhhc092ZXJsYXAoc3RhcnQsIGVuZCwgZ3JvdXAuc3RhcnQsIGdyb3VwLmVuZCkpIHsKICAgICAgICAgICAgZ3JvdXAudmlzdWFscy5wdXNoKHZpc3VhbCk7CiAgICAgICAgICAgIGdyb3VwLmVuZCA9IE1hdGgubWF4KGdyb3VwLmVuZCwgZW5kKTsKICAgICAgICAgICAgYWRkZWQgPSB0cnVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjEwLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IxMC5mKCk7CiAgICAgIH0KCiAgICAgIGlmICghYWRkZWQpIHsKICAgICAgICBncm91cHMucHVzaCh7CiAgICAgICAgICBzdGFydDogc3RhcnQsCiAgICAgICAgICBlbmQ6IGVuZCwKICAgICAgICAgIHZpc3VhbHM6IFt2aXN1YWxdCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjkuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3I5LmYoKTsKICB9CgogIHJldHVybiBncm91cHM7Cn0KCmZ1bmN0aW9uIGdldE5vZGUodmlzdWFsLCBkYXlTdGFydCkgewogIHZhciBfZ2V0Tm9ybWFsaXplZFJhbmdlMyA9IGdldE5vcm1hbGl6ZWRSYW5nZSh2aXN1YWwuZXZlbnQsIGRheVN0YXJ0KSwKICAgICAgX2dldE5vcm1hbGl6ZWRSYW5nZTQgPSBfc2xpY2VkVG9BcnJheShfZ2V0Tm9ybWFsaXplZFJhbmdlMywgMiksCiAgICAgIHN0YXJ0ID0gX2dldE5vcm1hbGl6ZWRSYW5nZTRbMF0sCiAgICAgIGVuZCA9IF9nZXROb3JtYWxpemVkUmFuZ2U0WzFdOwoKICByZXR1cm4gewogICAgcGFyZW50OiBudWxsLAogICAgc2libGluZzogdHJ1ZSwKICAgIGluZGV4OiAwLAogICAgdmlzdWFsOiB2aXN1YWwsCiAgICBzdGFydDogc3RhcnQsCiAgICBlbmQ6IGVuZCwKICAgIGNoaWxkcmVuOiBbXQogIH07Cn0KCmZ1bmN0aW9uIGdldE1heENoaWxkSW5kZXgobm9kZSkgewogIHZhciBtYXggPSBub2RlLmluZGV4OwoKICB2YXIgX2l0ZXJhdG9yMTEgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihub2RlLmNoaWxkcmVuKSwKICAgICAgX3N0ZXAxMTsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yMTEucygpOyAhKF9zdGVwMTEgPSBfaXRlcmF0b3IxMS5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBjaGlsZCA9IF9zdGVwMTEudmFsdWU7CiAgICAgIHZhciBjaGlsZE1heCA9IGdldE1heENoaWxkSW5kZXgoY2hpbGQpOwoKICAgICAgaWYgKGNoaWxkTWF4ID4gbWF4KSB7CiAgICAgICAgbWF4ID0gY2hpbGRNYXg7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjExLmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yMTEuZigpOwogIH0KCiAgcmV0dXJuIG1heDsKfQoKZnVuY3Rpb24gYWRkVGltZShpZGVudGlmaWVyLCBtaW51dGVzKSB7CiAgdmFyIHJlbW92ZU1pbnV0ZXMgPSBpZGVudGlmaWVyICUgMTAwOwogIHZhciB0b3RhbE1pbnV0ZXMgPSByZW1vdmVNaW51dGVzICsgbWludXRlczsKICB2YXIgYWRkSG91cnMgPSBNYXRoLmZsb29yKHRvdGFsTWludXRlcyAvIDYwKTsKICB2YXIgYWRkTWludXRlcyA9IHRvdGFsTWludXRlcyAlIDYwOwogIHJldHVybiBpZGVudGlmaWVyIC0gcmVtb3ZlTWludXRlcyArIGFkZEhvdXJzICogMTAwICsgYWRkTWludXRlczsKfQ=="},{"version":3,"mappings":"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","names":["getOverlapGroupHandler","getVisuals","hasOverlap","getNormalizedRange","getTimestampIdentifier","FULL_WIDTH","DEFAULT_OFFSET","WIDTH_MULTIPLIER","stack","events","firstWeekday","overlapThreshold","handler","day","dayEvents","timed","reset","dayStart","visuals","groups","getGroups","group","nodes","visual","child","getNode","index","getNextIndex","parent","getParent","sibling","start","end","addTime","children","push","getOverlappingRange","length","grand","grandNext","calculateBounds","sort","a","b","left","event","startTimestampIdentifier","node","columns","getMaxChildIndex","spaceLeft","spaceWidth","offset","Math","min","columnWidthMultiplier","getColumnWidthMultiplier","columnOffset","columnWidth","width","hasFullWidth","maxColumn","minColumn","reduce","c","getOverlappingIndices","indices","other","i","indexMin","indexMax","returnFirstColumn","overlapping","first","n","filter","added","max","childMax","identifier","minutes","removeMinutes","totalMinutes","addHours","floor","addMinutes"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/modes/stack.ts"],"sourcesContent":["import { CalendarEventOverlapMode, CalendarEventVisual } from 'vuetify/types'\nimport { getOverlapGroupHandler, getVisuals, hasOverlap, getNormalizedRange } from './common'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\ninterface Group {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\ninterface Node {\n  parent: Node | null\n  sibling: boolean\n  index: number\n  visual: CalendarEventVisual\n  start: number\n  end: number\n  children: Node[]\n}\n\nconst FULL_WIDTH = 100\n\nconst DEFAULT_OFFSET = 5\n\nconst WIDTH_MULTIPLIER = 1.7\n\n/**\n * Variation of column mode where events can be stacked. The priority of this\n * mode is to stack events together taking up the least amount of space while\n * trying to ensure the content of the event is always visible as well as its\n * start and end. A sibling column has intersecting event content and must be\n * placed beside each other. Non-sibling columns are offset by 5% from the\n * previous column. The width is scaled by 1.7 so the events overlap and\n * whitespace is reduced. If there is a hole in columns the event width is\n * scaled up so it intersects with the next column. The columns have equal\n * width in the space they are given. If the event doesn't have any to the\n * right of it that intersect with it's content it's right side is extended\n * to the right side.\n */\n\nexport const stack: CalendarEventOverlapMode = (events, firstWeekday, overlapThreshold) => {\n  const handler = getOverlapGroupHandler(firstWeekday)\n\n  // eslint-disable-next-line max-statements\n  return (day, dayEvents, timed, reset) => {\n    if (!timed) {\n      return handler.getVisuals(day, dayEvents, timed, reset)\n    }\n\n    const dayStart = getTimestampIdentifier(day)\n    const visuals = getVisuals(dayEvents, dayStart)\n    const groups = getGroups(visuals, dayStart)\n\n    for (const group of groups) {\n      const nodes: Node[] = []\n\n      for (const visual of group.visuals) {\n        const child = getNode(visual, dayStart)\n        const index = getNextIndex(child, nodes)\n\n        if (index === false) {\n          const parent = getParent(child, nodes)\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            child.index = parent.index + 1\n            parent.children.push(child)\n          }\n        } else {\n          const [parent] = getOverlappingRange(child, nodes, index - 1, index - 1)\n          const children = getOverlappingRange(child, nodes, index + 1, index + nodes.length, true)\n\n          child.children = children\n          child.index = index\n\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            parent.children.push(child)\n          }\n\n          for (const grand of children) {\n            if (grand.parent === parent) {\n              grand.parent = child\n            }\n\n            const grandNext = grand.index - child.index <= 1\n            if (grandNext && child.sibling &&\n              hasOverlap(child.start, addTime(child.start, overlapThreshold), grand.start, grand.end)) {\n              grand.sibling = true\n            }\n          }\n        }\n\n        nodes.push(child)\n      }\n\n      calculateBounds(nodes, overlapThreshold)\n    }\n\n    visuals.sort((a, b) => (a.left - b.left) || (a.event.startTimestampIdentifier - b.event.startTimestampIdentifier))\n\n    return visuals\n  }\n}\n\nfunction calculateBounds (nodes: Node[], overlapThreshold: number) {\n  for (const node of nodes) {\n    const { visual, parent } = node\n    const columns = getMaxChildIndex(node) + 1\n    const spaceLeft = parent ? parent.visual.left : 0\n    const spaceWidth = FULL_WIDTH - spaceLeft\n    const offset = Math.min(DEFAULT_OFFSET, FULL_WIDTH / columns)\n    const columnWidthMultiplier = getColumnWidthMultiplier(node, nodes)\n    const columnOffset = spaceWidth / (columns - node.index + 1)\n    const columnWidth = spaceWidth / (columns - node.index + (node.sibling ? 1 : 0)) * columnWidthMultiplier\n\n    if (parent) {\n      visual.left = node.sibling\n        ? spaceLeft + columnOffset\n        : spaceLeft + offset\n    }\n\n    visual.width = hasFullWidth(node, nodes, overlapThreshold)\n      ? FULL_WIDTH - visual.left\n      : Math.min(FULL_WIDTH - visual.left, columnWidth * WIDTH_MULTIPLIER)\n  }\n}\n\nfunction getColumnWidthMultiplier (node: Node, nodes: Node[]): number {\n  if (!node.children.length) {\n    return 1\n  }\n\n  const maxColumn = node.index + nodes.length\n  const minColumn = node.children.reduce((min, c) => Math.min(min, c.index), maxColumn)\n\n  return minColumn - node.index\n}\n\nfunction getOverlappingIndices (node: Node, nodes: Node[]): number[] {\n  const indices: number[] = []\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end)) {\n      indices.push(other.index)\n    }\n  }\n  return indices\n}\n\nfunction getNextIndex (node: Node, nodes: Node[]): number | false {\n  const indices = getOverlappingIndices(node, nodes)\n  indices.sort()\n\n  for (let i = 0; i < indices.length; i++) {\n    if (i < indices[i]) {\n      return i\n    }\n  }\n  return false\n}\n\nfunction getOverlappingRange (node: Node, nodes: Node[], indexMin: number, indexMax: number, returnFirstColumn = false): Node[] {\n  const overlapping: Node[] = []\n  for (const other of nodes) {\n    if (other.index >= indexMin && other.index <= indexMax && hasOverlap(node.start, node.end, other.start, other.end)) {\n      overlapping.push(other)\n    }\n  }\n  if (returnFirstColumn && overlapping.length > 0) {\n    const first = overlapping.reduce((min, n) => Math.min(min, n.index), overlapping[0].index)\n    return overlapping.filter(n => n.index === first)\n  }\n  return overlapping\n}\n\nfunction getParent (node: Node, nodes: Node[]): Node | null {\n  let parent: Node | null = null\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end) && (parent === null || other.index > parent.index)) {\n      parent = other\n    }\n  }\n  return parent\n}\n\nfunction hasFullWidth (node: Node, nodes: Node[], overlapThreshold: number): boolean {\n  for (const other of nodes) {\n    if (other !== node &&\n      other.index > node.index &&\n      hasOverlap(node.start, addTime(node.start, overlapThreshold), other.start, other.end)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction getGroups (visuals: CalendarEventVisual[], dayStart: number): Group[] {\n  const groups: Group[] = []\n\n  for (const visual of visuals) {\n    const [start, end] = getNormalizedRange(visual.event, dayStart)\n    let added = false\n\n    for (const group of groups) {\n      if (hasOverlap(start, end, group.start, group.end)) {\n        group.visuals.push(visual)\n        group.end = Math.max(group.end, end)\n        added = true\n        break\n      }\n    }\n\n    if (!added) {\n      groups.push({ start, end, visuals: [visual] })\n    }\n  }\n\n  return groups\n}\n\nfunction getNode (visual: CalendarEventVisual, dayStart: number): Node {\n  const [start, end] = getNormalizedRange(visual.event, dayStart)\n\n  return {\n    parent: null,\n    sibling: true,\n    index: 0,\n    visual,\n    start,\n    end,\n    children: [],\n  }\n}\n\nfunction getMaxChildIndex (node: Node): number {\n  let max = node.index\n  for (const child of node.children) {\n    const childMax = getMaxChildIndex(child)\n    if (childMax > max) {\n      max = childMax\n    }\n  }\n  return max\n}\n\nfunction addTime (identifier: number, minutes: number): number {\n  const removeMinutes = identifier % 100\n  const totalMinutes = removeMinutes + minutes\n  const addHours = Math.floor(totalMinutes / 60)\n  const addMinutes = totalMinutes % 60\n\n  return identifier - removeMinutes + addHours * 100 + addMinutes\n}\n"]}]}